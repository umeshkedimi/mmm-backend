"""add users and broker_accounts updated

Revision ID: 0d5b15618766
Revises: fad575438f2c
Create Date: 2025-05-31 23:31:34.475690

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '0d5b15618766'
down_revision: Union[str, None] = 'fad575438f2c'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_trade_logs_id'), table_name='trade_logs')
    op.drop_table('trade_logs')
    op.add_column('broker_accounts', sa.Column('broker_name', sa.String(), nullable=False, server_default='dhan'))
    op.add_column('broker_accounts', sa.Column('client_id', sa.String(), nullable=False, server_default='dummy'))
    op.add_column('broker_accounts', sa.Column('access_token', sa.String(), nullable=False, server_default='dummy'))
    op.add_column('broker_accounts', sa.Column('telegram_chat_id', sa.String(), nullable=True))
    op.add_column('broker_accounts', sa.Column('lot_size', sa.Integer(), nullable=False, server_default='15'))
    op.add_column('broker_accounts', sa.Column('index', sa.String(), nullable=False, server_default='banknifty'))
    op.add_column('broker_accounts', sa.Column('direction', sa.String(), nullable=False, server_default='sell'))
    op.add_column('broker_accounts', sa.Column('is_active', sa.Boolean(), nullable=True))
    op.add_column('broker_accounts', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.alter_column('broker_accounts', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=False, server_default='1')
    op.create_index(op.f('ix_broker_accounts_id'), 'broker_accounts', ['id'], unique=False)
    op.drop_column('broker_accounts', 'totp_secret')
    op.drop_column('broker_accounts', 'broker')
    op.drop_column('broker_accounts', 'api_key')
    op.drop_column('broker_accounts', 'api_secret')
    op.add_column('users', sa.Column('email', sa.String(), nullable=True))
    op.add_column('users', sa.Column('password_hash', sa.String(), nullable=False, server_default='dummy'))
    op.add_column('users', sa.Column('full_name', sa.String(), nullable=True))
    op.add_column('users', sa.Column('is_active', sa.Boolean(), nullable=True))
    op.add_column('users', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.create_unique_constraint(None, 'users', ['email'])
    op.create_unique_constraint(None, 'users', ['username'])
    op.drop_column('users', 'totp_secret')
    op.drop_column('users', 'is_admin')
    op.drop_column('users', 'api_key')
    op.drop_column('users', 'api_secret')
    op.drop_column('users', 'broker')
    op.drop_column('users', 'kill_switch')
    op.drop_column('users', 'hashed_password')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('hashed_password', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('users', sa.Column('kill_switch', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('broker', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('users', sa.Column('api_secret', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('api_key', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('is_admin', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('totp_secret', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'users', type_='unique')
    op.drop_constraint(None, 'users', type_='unique')
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.drop_column('users', 'created_at')
    op.drop_column('users', 'is_active')
    op.drop_column('users', 'full_name')
    op.drop_column('users', 'password_hash')
    op.drop_column('users', 'email')
    op.add_column('broker_accounts', sa.Column('api_secret', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('broker_accounts', sa.Column('api_key', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('broker_accounts', sa.Column('broker', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('broker_accounts', sa.Column('totp_secret', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_broker_accounts_id'), table_name='broker_accounts')
    op.alter_column('broker_accounts', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_column('broker_accounts', 'created_at')
    op.drop_column('broker_accounts', 'is_active')
    op.drop_column('broker_accounts', 'direction')
    op.drop_column('broker_accounts', 'index')
    op.drop_column('broker_accounts', 'lot_size')
    op.drop_column('broker_accounts', 'telegram_chat_id')
    op.drop_column('broker_accounts', 'access_token')
    op.drop_column('broker_accounts', 'client_id')
    op.drop_column('broker_accounts', 'broker_name')
    op.create_table('trade_logs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('symbol', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('direction', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('quantity', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('pnl', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('exit_reason', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('trade_logs_pkey'))
    )
    op.create_index(op.f('ix_trade_logs_id'), 'trade_logs', ['id'], unique=False)
    # ### end Alembic commands ###
